---- cJSON_CreateArray Matches (80 in 20 files) ----
Basilisk.c (basilisk):                            utxos = cJSON_CreateArray();
Basilisk.c (basilisk):                retjson = cJSON_CreateArray();
Basilisk.c (basilisk):    int32_t i; cJSON *array = cJSON_CreateArray();
Basilisk.c (basilisk):    unspents = cJSON_CreateArray();
Basilisk.c (basilisk):    spends = cJSON_CreateArray();
Basilisk.c (basilisk):            array3 = cJSON_CreateArray();
Basilisk.c (basilisk):    full = cJSON_CreateArray();
Basilisk.c (basilisk):    native = cJSON_CreateArray();
Basilisk.c (basilisk):    basilisk = cJSON_CreateArray();
Basilisk.c (basilisk):    virtual = cJSON_CreateArray();
Basilisk.c (basilisk):    notarychains = cJSON_CreateArray();
Basilisk_bitcoin.c (basilisk):    int64_t balance,total = 0; int32_t i,j,n,hist; char *str; cJSON *spends,*unspents,*retjson,*item,*addresses,*array = cJSON_CreateArray();
Basilisk_bitcoin.c (basilisk):            unspents = cJSON_CreateArray();
Basilisk_bitcoin.c (basilisk):            spends = cJSON_CreateArray();
Basilisk_bitcoin.c (basilisk):                    retjson = cJSON_CreateArray();
Basilisk_bitcoin.c (basilisk):        retjson = cJSON_CreateArray();
Basilisk_bitcoin.c (basilisk):        retjson = cJSON_CreateArray();
Basilisk_bitcoin.c (basilisk):    int32_t i,j,n,m; cJSON *jobj,*iobj,*dest = cJSON_CreateArray();
basilisk_DEX.c (basilisk):    array = cJSON_CreateArray();
basilisk_DEX.c (basilisk):    array = cJSON_CreateArray();
basilisk_DEX.c (basilisk):        array = cJSON_CreateArray();
basilisk_MSG.c (basilisk):    array = cJSON_CreateArray();
basilisk_MSG.c (basilisk):                item = cJSON_CreateArray();
Basilisk_swap.c (basilisk):    privkeys = cJSON_CreateArray();
Basilisk_swap.c (basilisk):    vins = cJSON_CreateArray();
Basilisk_swap.c (basilisk):    privkeyarray = cJSON_CreateArray();
Basilisk_swap.c (basilisk):    addresses = cJSON_CreateArray();
Basilisk_swap.c (basilisk):    privkeys = cJSON_CreateArray();
Basilisk_swap.c (basilisk):    vins = cJSON_CreateArray();
Basilisk_swap.c (basilisk):    array = cJSON_CreateArray();
Basilisk_swap.c (basilisk):    array = cJSON_CreateArray();
Basilisk_swap.c (basilisk):    array = cJSON_CreateArray();
Basilisk_swap.c (basilisk):    array = cJSON_CreateArray();
Basilisk_swap.c (basilisk):    array = cJSON_CreateArray();
Basilisk_vote.c (basilisk):    array = cJSON_CreateArray();
Basilisk_vote.c (basilisk):            array = cJSON_CreateArray();
Basilisk_vote.c (basilisk):                array = cJSON_CreateArray();
Bet-cli.c (privatebet):	cJSON_AddItemToObject(deckInfo,"CardsInfo",cardsInfo=cJSON_CreateArray());
Bet-cli.c (privatebet):	cJSON_AddItemToObject(initInfo,"cardinfo",cardsInfo=cJSON_CreateArray());
Bet.c (privatebet):		rawtxInfo=cJSON_CreateArray();
Cards777.c (privatebet):        ciphers = cJSON_CreateArray();
Cards777.c (privatebet):        cardarray = cJSON_CreateArray();
cJSON.c (crypto777):cJSON *cJSON_CreateIntArray(int64_t *numbers,int32_t count)		{int32_t i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber((double)numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}
cJSON.c (crypto777):cJSON *cJSON_CreateFloatArray(float *numbers,int32_t count)	{int32_t i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}
cJSON.c (crypto777):cJSON *cJSON_CreateDoubleArray(double *numbers,int32_t count)	{int32_t i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}
cJSON.c (crypto777):cJSON *cJSON_CreateStringArray(char **strings,int32_t count)	{int32_t i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateString(strings[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}
cJSON.c (crypto777):    array = cJSON_CreateArray();
cJSON.c (crypto777):    array = cJSON_CreateArray();
cJSON.c (crypto777):cJSON *cJSON_CreateArray(void)
cJSON.h (includes):    extern cJSON *cJSON_CreateArray(void);
Client.c (privatebet):            array = cJSON_CreateArray();
Client.c (privatebet):			cJSON_AddItemToObject(playerInfo,"playercards",cjsonplayercards=cJSON_CreateArray());
Client.c (privatebet):						cJSON_AddItemToObject(gameInfo,"blindedcards",cjsonblindedcards=cJSON_CreateArray());
Client.c (privatebet):						cJSON_AddItemToObject(gameInfo,"shamirshards",cjsonshamirshards=cJSON_CreateArray());
Client.c (privatebet):	cJSON_AddItemToObject(bvv_init_info,"bvvblindcards",cjsonbvvblindcards=cJSON_CreateArray());
Client.c (privatebet):	cJSON_AddItemToObject(bvv_init_info,"shamirshards",cjsonshamirshards=cJSON_CreateArray());
Client.c (privatebet):	cJSON_AddItemToObject(init_p,"cardinfo",cjsonplayercards=cJSON_CreateArray());
Host.c (privatebet):						potInfo=cJSON_CreateArray();
Host.c (privatebet):    int32_t i; bits256 rhash; struct privatebet_peerln *p; cJSON *array = cJSON_CreateArray();
Host.c (privatebet):		  cJSON_AddItemToObject(gameInfo,"cardprods",cjsoncardprods=cJSON_CreateArray());
Host.c (privatebet):		  cJSON_AddItemToObject(gameInfo,"finalcards",cjsonfinalcards=cJSON_CreateArray());
Host.c (privatebet):		  cJSON_AddItemToObject(gameInfo,"g_hash",cjsong_hash=cJSON_CreateArray());
Host.c (privatebet):	  cJSON_AddItemToObject(deck_init_info,"cardprods",cjsoncardprods=cJSON_CreateArray());
Host.c (privatebet):	  cJSON_AddItemToObject(deck_init_info,"dcvblindcards",cjsondcvblindcards=cJSON_CreateArray());
Host.c (privatebet):	  cJSON_AddItemToObject(deck_init_info,"g_hash",cjsong_hash=cJSON_CreateArray());
Host.c (privatebet):	  cJSON_AddItemToObject(deck_init_info,"peerpubkeys",cjsonpeerpubkeys=cJSON_CreateArray());
Host.c (privatebet):	cJSON_AddItemToObject(tableInfo,"playersInfo",playersInfo=cJSON_CreateArray());
Host.c (privatebet):	cJSON_AddItemToObject(bvvReady,"uri_info",uriInfo=cJSON_CreateArray());
Jumblr.c (basilisk):                utxo = cJSON_CreateArray();
Jumblr.c (basilisk):            privkeys = cJSON_CreateArray();
Network.c (privatebet):    int32_t i; cJSON *array = cJSON_CreateArray();
Oracle.c (privatebet):    pubs = cJSON_CreateArray();
Payment.c (privatebet):                    array = cJSON_CreateArray();
Smartaddress.c (basilisk):        array = cJSON_CreateArray();
Smartaddress.c (basilisk):    int32_t i; cJSON *retjson = cJSON_CreateArray();
States.c (privatebet):    return(cJSON_CreateArray());
States.c (privatebet):        array = cJSON_CreateArray();
States.c (privatebet):	cJSON_AddItemToObject(roundBetting,"actions",actions=cJSON_CreateArray());
States.c (privatebet):	cJSON_AddItemToObject(roundBetting,"possibilities",possibilities=cJSON_CreateArray());
Table.c (privatebet):    array = cJSON_CreateArray();
